git安装完成后，还需要进行设置
git config --global user.name "Your Name"
git config --global user.email "email@example.com"
注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
==================================================================================================
1.mkdir gitlab
2.cd gitlab
3.pwd
4.git init	命令把这个目录变成Git可以管理的仓库
5.touch readme.txt
6.vim readme.txt
7.git add readme.txt(可以反复使用,添加多个文件)
8.git commit -m "hello world"
至此我们已经成功的添加并提交了一个readme.txt文件
我们可以继续修改readme.txt

1.vim readme.txt
2.git status	命令可以让我们时刻掌握仓库当前的状态
3.git diff readme.txt  	 如果git status告诉你有文件被修改过，用git diff可以查看修改内容
==================================================================================================
版本回退
1.git log	命令显示从最近到最远的提交日志
2.git log --pretty=oneline
3.在Git中，用HEAD表示当前版本，即最新的提交，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
4.git reset --hard HEAD^
5.git reset --hard 1094a回退到指定版本，版本号没必要写全，前几位就可以了，Git会自动去找
6.git reflog用来记录你的每一次命令
==================================================================================================
工作区和暂存区
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，gitcommit就是往master分支上提交更改。你可以简单理解为，需要提交的文件修改
通通放到暂存区，然后，一次性提交暂存区的所有修改。
==================================================================================================
管理修改
git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
git checkout -- file可以丢弃工作区的修改，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。总之，就是让这个文件回到最近一次git commit或git add时的状态。
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
==================================================================================================
创建ssh key
ssh-keygen -t rsa -C "myemail@xxx.com"
如何同一电脑上进行多个github账号配置？
1.生成一个新的ssh key
ssh-keygen -t rsa -C "newemail@xxx.com"(注意指定新生成的文件名，不能与之前的相同，否则就会被覆盖)
2.配置config,修改~/.ssh/config文件(如果没有则新建)，加入如下内容
Host github.com
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa
Host github_test
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa_2
3.将新生成的id_rsa_2.pub添加关联到第二个Github账号中，即add ssh key到github账号
4.构建本地库，指定一个目录后执行git init
5.执行git add <file>
6.执行git commit -m "comments"将文件添加提交到本地库后
7.git remote add origin git@github_test:ibuerchao/git-study.git
注意，把上面的ibuerchao是自己的GitHub账户名，否则，你在本地关联的就是别人的远程库，github_test是第二个账号的别名配置
8.git push -u origin master本地库关联远程库后执行此命令将本地库推送到远程库(首次推送加上了-u参数)
9.git push origin master每次本地提交后推送最新修改